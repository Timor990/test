{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"captcha-container\"\n};\nconst _hoisted_2 = {\n  ref: \"captchaCanvas\",\n  width: \"200\",\n  height: \"50\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), _createVNode(_component_el_button, {\n    class: \"button\",\n    onClick: $options.handleClick\n  }, null, 8 /* PROPS */, [\"onClick\"])])]);\n}","map":{"version":3,"names":["class","ref","width","height","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","_createVNode","_component_el_button","onClick","$options","handleClick"],"sources":["E:\\停车公司项目\\3.信息部工作\\webApp\\webapp\\src\\views\\login\\components\\captcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"captcha-container\">\r\n      <canvas ref=\"captchaCanvas\" width=\"200\" height=\"50\"></canvas>\r\n      <el-button class=\"button\" @click=\"handleClick\" ></el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default{\r\n  name:'Captcha',\r\n  props(){\r\n\r\n  },\r\n  data(){\r\n    return {\r\n      captchaText:'',\r\n      isClicked:false\r\n    }\r\n  },\r\n  computed:{\r\n    textColor(){\r\n      return this.isClicked ? 'purple' : 'blue'; // 根据状态返回颜色\r\n    }\r\n  },\r\n  mounted(){\r\n    this.generateCaptcha();\r\n  },\r\n  methods:{\r\n    handleClick(){\r\n      this.isClicked=true;\r\n      this.generateCaptcha();\r\n    },\r\n    generateCaptcha(){\r\n      const canvas = this.$refs.captchaCanvas;\r\n      const ctx = canvas.getContext('2d');\r\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n      this.captchaText = '';\r\n      \r\n      // 生成随机验证码\r\n      for (let i = 0; i < 6; i++) {\r\n        this.captchaText += chars.charAt(Math.floor(Math.random() * chars.length));\r\n      }\r\n\r\n      // 清空画布\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // 设置背景色\r\n      ctx.fillStyle = '#f0f0f0';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      console.log(canvas.width)\r\n      console.log(canvas.height)\r\n      // 添加一些干扰线\r\n      for (let i = 0; i < 5; i++) {\r\n        ctx.strokeStyle = this.getRandomColor();\r\n        ctx.beginPath();\r\n        let tempWidth=Math.random() * canvas.width;\r\n        let tempHeigt=Math.random() * canvas.height\r\n        console.log(tempWidth)\r\n        console.log(tempHeigt)\r\n        ctx.moveTo(tempWidth,tempHeigt );\r\n        ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);\r\n        ctx.stroke();\r\n      }\r\n      console.log(this.captchaText)\r\n      // 绘制验证码字符\r\n      for (let i = 0; i < this.captchaText.length; i++) {\r\n        ctx.font = `${this.getRandomFontSize()}px Arial`;\r\n        ctx.fillStyle = this.getRandomColor();\r\n        ctx.save();\r\n        \r\n        // 随机旋转字符\r\n        ctx.translate(30 * i + 20, canvas.height / 2 + Math.random() * 10 - 5);\r\n        ctx.rotate((Math.random() - 0.5) * Math.PI / 6); // 随机旋转 -30° 到 30°\r\n        ctx.fillText(this.captchaText[i], 0, 0);\r\n        ctx.restore();\r\n      }\r\n    },\r\n    getRandomColor() {\r\n      const letters = '0123456789ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n      return color;\r\n    },\r\n    getRandomFontSize() {\r\n      return Math.floor(Math.random() * 10) + 20; // 随机字体大小 20px 到 30px\r\n    },\r\n\r\n}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.captcha-container {\r\n  position: relative; /* 设置容器为相对定位 */\r\n  display: inline-block; /* 使容器适应内容 */\r\n}\r\n.text1{\r\n  text-decoration: underline;\r\n  cursor:pointer ;\r\n  color:blue;\r\n}\r\n.text2{\r\n  text-decoration: underline;\r\n  cursor:pointer ;\r\n  color:purple\r\n}\r\n.button{\r\n  position: absolute; \r\n  bottom: 5px; \r\n  right: 5px;\r\n  background-image: url('../../../assets/input.png'); \r\n  background-color: transparent; \r\n  background-size: contain; \r\n  background-repeat: no-repeat;\r\n  color: white; \r\n  border: none; \r\n  width: 20px;\r\n  height: 20px; \r\n  text-align: center;\r\n  display: inline-flex; \r\n  align-items: center; \r\n  justify-content: center; \r\n}\r\n.button:hover {\r\n  opacity: 0.5; \r\n  background-color: transparent; \r\n}\r\n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAAmB;;EACpBC,GAAG,EAAC,eAAe;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;uBAFnDC,mBAAA,CAKM,cAJJC,mBAAA,CAGM,OAHNC,UAGM,GAFJD,mBAAA,CAA6D,UAA7DE,UAA6D,+BAC7DC,YAAA,CAA4DC,oBAAA;IAAjDT,KAAK,EAAC,QAAQ;IAAEU,OAAK,EAAEC,QAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}